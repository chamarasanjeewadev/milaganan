import { useState, useEffect } from "react";
import { Header } from "./Header";
import { Editor } from "./Editor";
import { Preview } from "./Preview";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import { Helmet } from "react-helmet";

const initialMarkdown = `# ‡∑É‡∑è‡∂Ø‡∂ª‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂ú‡∂±‡∑í‡∂∏‡∑î 
## ‡∂ë‡∑Ö‡∑Ä‡∑Ö‡∑î ‡∂∏‡∑í‡∂Ω ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä

## ‡∑Ä‡∑í‡∑Å‡∑ö‡∑Ç‡∑è‡∂Ç‡∂ú
- ü•¶ ‡∂≠‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω‡∑ì‡∂± ‡∂∏‡∑í‡∂Ω ‡∂ú‡∂´‡∂±‡∑ä
- üå± ‡∂≠‡∂≠‡∑ä‡∂≠‡∑ä‡∑Ä ‡∑É‡∑Ñ‡∂≠‡∑í‡∂ö
- üç≤ ‡∂¥‡∑è‡∂ª‡∑í‡∂∑‡∑ù‡∂ú‡∑í‡∂ö ‡∑É‡∑ê‡∂Ω‡∑É‡∑î‡∂∏‡∑ä
- üì± ‡∂¢‡∂Ç‡∂ú‡∂∏ ‡∂∂‡∑ô‡∂Ø‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ä
- üì∑ QR ‡∂ö‡∑ö‡∂≠ ‡∂∂‡∑ô‡∂Ø‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏

### ‡∂Ö‡∂¥‡∂ú‡∑ö ‡∑Ä‡∑í‡∑Ä‡∑í‡∂∞ ‡∂ë‡∑Ö‡∑Ä‡∑Ö‡∑î ‡∂∏‡∑í‡∂Ω ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±!
1. ‡∑Ä‡∂∏‡∑ä ‡∂¥‡∑ê‡∂≠‡∑ä‡∂≠‡∑ö ‡∑Ä‡∑í‡∑É‡∑ä‡∂≠‡∂ª ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±
2. ‡∂ë‡∑Ö‡∑Ä‡∑Ö‡∑î ‡∂≠‡∂≠‡∑ä‡∑Ä‡∂∫‡∂±‡∑ä ‡∑É‡∑Ñ ‡∂∏‡∑í‡∂Ω ‡∂ú‡∂´‡∂±‡∑ä ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±
3. QR ‡∂ö‡∑ö‡∂≠‡∂∫ ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂±‡∑ä‡∂± ‡∂î‡∂∂‡∑ö ‡∂¢‡∂Ç‡∂ú‡∂∏ ‡∂Ø‡∑î‡∂ª‡∂ö‡∂Æ‡∂±‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∂ª‡∑í‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±

#### ‡∂∏‡∑í‡∂Ω ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä - ‡∂ë‡∑Ö‡∑Ä‡∑Ö‡∑î
| ‡∂ë‡∑Ö‡∑Ä‡∑Ö‡∑î             | ‡∂∏‡∑í‡∂Ω (‡∂ª‡∑î) | ‡∂≠‡∂≠‡∑ä‡∑Ä‡∂∫ |
|--------------------|----------|--------|
| üçÖ ‡∂≠‡∂ö‡∑ä‡∂ö‡∑è‡∂Ω‡∑í          | 150.00   | ‚úÖ    |
| ü•î ‡∂Ö‡∂Ω                | 120.00   | ‚úÖ    |
| ü•ï ‡∂ö‡∑ê‡∂ª‡∂ß‡∑ä            | 80.00    | ‚úÖ    |
| ü•í ‡∂¥‡∑í‡∂¥‡∑í‡∂§‡∑ä‡∂§‡∑è          | 60.00    | ‚úÖ    |
| üçÜ ‡∑Ä‡∂∏‡∑ä‡∂∂‡∂ß‡∑î           | 90.00    | ‚úÖ    |
| üå∂Ô∏è ‡∂∏‡∑í‡∂ª‡∑í‡∑É‡∑ä            | 200.00   | ‚úÖ    |
| ü•¨ ‡∂ö‡∑ú‡∑É‡∑ä             | 75.00    | ‚úÖ    |
| üåΩ ‡∂∂‡∂© ‡∂â‡∂ª‡∑í‡∂ü‡∑î        | 50.00    | ‚úÖ    |

> üì≤ ‡∂¢‡∂Ç‡∂ú‡∂∏ ‡∂ã‡∂¥‡∂ö‡∂ª‡∂´‡∂∫‡∑ö ‡∂∏‡∑ô‡∂∏ ‡∂∏‡∑í‡∂Ω ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î‡∑Ä ‡∂±‡∑ê‡∂ª‡∂π‡∑ì‡∂∏‡∂ß QR ‡∂ö‡∑ö‡∂≠‡∂∫ ‡∂¥‡∑è‡∂ª‡∑í‡∂ö‡∑ä‚Äç‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±!
`;

interface MarkdownResponse {
  content: string;
  id: string;
  font: string;
  // add other fields that your API returns
}

const fetchMarkdown = async (id: string | null): Promise<MarkdownResponse> => {
  if (!id) throw new Error("No ID provided");
  const response = await axios.get<MarkdownResponse>(
    `${import.meta.env.VITE_API_URL}/markdown/${id}`,
  );
  return response.data;
};

interface AppProps {
  id?: string;
  isPreview?: boolean;
}

export const FONT_OPTIONS = [
  "Noto Sans Sinhala",
  "Open Sans",
  "Roboto",
  "Lato",
  "Montserrat",
  "Source Code Pro",
  "Fira Code",
  "Arial",
  "Times New Roman",
];

interface LogoState {
  url: string | undefined;
  timestamp: number;
}

function App({ id, isPreview = false }: AppProps) {
  const [markdown, setMarkdown] = useState<string>(initialMarkdown);
  const [selectedFont, setSelectedFont] = useState<string>("Open Sans");
  const [logoUrl, setLogoUrl] = useState<LogoState>({
    url: id ? `${id}/logo.jpg` : undefined,
    timestamp: Date.now(),
  });

  // Use React Query to fetch markdown
  const { isLoading, error, data } = useQuery<MarkdownResponse, Error>({
    queryKey: ["markdown", id],
    queryFn: () => fetchMarkdown(id || null),
    enabled: !!id,
  });

  // Use useEffect to update markdown when data changes
  useEffect(() => {
    if (data) {
      setSelectedFont(data?.font ?? "Open Sans");
      if (!data.content) {
        setMarkdown(initialMarkdown);
        return;
      } else {
        setMarkdown(data.content);
      }
    }
  }, [data]);

  console.log("data", data);

  if (isPreview) {
    return (
      <div className="min-h-screen bg-gray-50">
        <Helmet>
          <link
            href="https://fonts.googleapis.com/css2?family=Noto+Sans+Sinhala:wght@400;500;700&display=swap"
            rel="stylesheet"
          />
          <link
            href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;700&family=Roboto:wght@400;500;700&family=Lato:wght@400;700&family=Montserrat:wght@400;500;700&family=Source+Code+Pro:wght@400;700&family=Fira+Code:wght@400;700&display=swap"
            rel="stylesheet"
          />
        </Helmet>
        <main className="max-w-7xl mx-auto px-4 py-6">
          {isLoading ? (
            <div className="flex items-center justify-center">
              <p>Loading markdown content...</p>
            </div>
          ) : error ? (
            <div className="flex items-center justify-center">
              <p>Error loading content. Please try again later.</p>
            </div>
          ) : (
            <Preview
              markdown={{ markdown, id, font: selectedFont }}
              logoUrl={logoUrl.url}
              isPreview
            />
          )}
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <Helmet>
        <link
          href="https://fonts.googleapis.com/css2?family=Noto+Sans+Sinhala:wght@400;500;700&display=swap"
          rel="stylesheet"
        />
        <link
          href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;700&family=Roboto:wght@400;500;700&family=Lato:wght@400;700&family=Montserrat:wght@400;500;700&family=Source+Code+Pro:wght@400;700&family=Fira+Code:wght@400;700&display=swap"
          rel="stylesheet"
        />
      </Helmet>
      <Header />
      <main className="max-w-7xl mx-auto px-4 py-6">
        <div className="grid md:grid-cols-2 gap-6 h-[calc(100vh-8rem)]">
          {isLoading ? (
            <div className="col-span-2 flex items-center justify-center">
              <p>Loading markdown content...</p>
            </div>
          ) : error ? (
            <div className="col-span-2 flex items-center justify-center ">
              <p>Error loading content. Please try again later.</p>
            </div>
          ) : (
            <>
              <Editor
                markdown={{ markdown, id: id ? parseInt(id) : undefined }}
                setMarkdown={setMarkdown}
                isMobilePreviewVisible={false}
                selectedFont={selectedFont}
                setSelectedFont={setSelectedFont}
                setLogoUrl={setLogoUrl}
              />
              <Preview
                markdown={{ markdown, id, font: selectedFont }}
                logoUrl={logoUrl}
                isPreview
              />
            </>
          )}
        </div>
      </main>
    </div>
  );
}
export default App;
